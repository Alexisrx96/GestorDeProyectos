/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gestordeproyectos.view.admin;

import gestordeproyectos.dao.DepartamentoDao;
import gestordeproyectos.dao.EmpleadoDao;
import gestordeproyectos.dao.EstadoEmpleadoDao;
import gestordeproyectos.dao.RolDao;
import gestordeproyectos.dto.DepartamentoDto;
import gestordeproyectos.dto.EmpleadoDto;
import gestordeproyectos.dto.EstadoEmpleadoDto;
import gestordeproyectos.dto.RolDto;
import gestordeproyectos.util.JTextFieldLimit;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Irvin
 */
public class Empleados extends javax.swing.JInternalFrame {

    /**
     * Creates new form Empleados
     */
    public static boolean isOpen = false;

    private List<DepartamentoDto> departamentos;
    private List<RolDto> roles;
    private List<EstadoEmpleadoDto> estados;
    private List<EmpleadoDto> empleados;
    private EmpleadoDto jefe;
    private EmpleadoDto nuevoEmpleado;
    Object[][] datos;
    final String[] COLUMNAS;
    final EmpleadoDao EMPLEADO_DAO;
    final RolDao ROL_DAO;
    final DepartamentoDao DEPARTAMENTO_DAO;
    final EstadoEmpleadoDao ESTADO_DAO;

    public Empleados() {
        isOpen = true;
        initComponents();
        btnActualizarEmpleado.setEnabled(false);
        String[] cols = {"Id", "Nombre", "Estado", "Jefe", "Rol", "Departamento"};
        COLUMNAS = cols;
        EMPLEADO_DAO = new EmpleadoDao();
        ROL_DAO = new RolDao();
        DEPARTAMENTO_DAO = new DepartamentoDao();
        ESTADO_DAO = new EstadoEmpleadoDao();
        departamentos = DEPARTAMENTO_DAO.list();
        roles = ROL_DAO.list();
        estados = ESTADO_DAO.list();
        empleados = EMPLEADO_DAO.list();
        //Limita la cantidad de caracteres del nombre de usuario
        txtNombresEmpleado.setDocument(new JTextFieldLimit(100));
        fillTable();
        txtBuscarEmpleado.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                fillTable();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                fillTable();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                fillTable();
            }
        });
        cmbDepartamento.removeAllItems();
        cmbDepartamento.addItemListener((e) -> setJefe());
        departamentos.forEach(
                d -> cmbDepartamento.addItem(d.getNombreDepartamento())
        );

        cmbRolEmpleado.removeAllItems();
        cmbRolEmpleado.addItemListener((e) -> changeRol());
        roles.forEach(r -> cmbRolEmpleado.addItem(r.getNombreRol()));

        cmbEstado.removeAllItems();
        estados.forEach((e) -> cmbEstado.addItem(e.getNombreEstadoEmpleado()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtIdEmpleado = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombresEmpleado = new javax.swing.JTextField();
        cmbRolEmpleado = new javax.swing.JComboBox<>();
        cmbDepartamento = new javax.swing.JComboBox<>();
        lblJefe = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        cmbEstado = new javax.swing.JComboBox<>();
        lblNombreJefe = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnIngresarEmpleado = new javax.swing.JButton();
        btnActualizarEmpleado = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableEmpleados = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        txtBuscarEmpleado = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("..:Empleados:.."));

        jLabel2.setText("id");

        txtIdEmpleado.setEditable(false);
        txtIdEmpleado.setEnabled(false);

        jLabel3.setText("Nombre");

        jLabel8.setText("Rol");

        jLabel9.setText("Departamento");

        cmbRolEmpleado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbDepartamento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblJefe.setText("Jefe");

        lblEstado.setText("Estado");

        cmbEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblNombreJefe.setPreferredSize(new java.awt.Dimension(26, 16));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJefe)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(18, 18, 18)
                            .addComponent(cmbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(4, 4, 4))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel8)
                                .addComponent(lblEstado))
                            .addGap(52, 52, 52)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(lblNombreJefe, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cmbRolEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(4, 4, 4))
                                .addComponent(cmbEstado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtNombresEmpleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtIdEmpleado, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIdEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombresEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstado)
                    .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblJefe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblNombreJefe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbRolEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbDepartamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(9, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("..:Controles de empleado:.."));

        btnIngresarEmpleado.setText("Ingresar nuevo empleado");
        btnIngresarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIngresarEmpleadoActionPerformed(evt);
            }
        });

        btnActualizarEmpleado.setText("Actualizar empleado");
        btnActualizarEmpleado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarEmpleadoActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnActualizarEmpleado, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                    .addComponent(btnIngresarEmpleado)
                    .addComponent(btnCancelar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(btnIngresarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnActualizarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("..:Empleados:.."));

        jTableEmpleados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableEmpleados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableEmpleados.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableEmpleados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEmpleadosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableEmpleados);

        jLabel10.setText("Buscar empleado por nombre");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addGap(18, 18, 18)
                .addComponent(txtBuscarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtBuscarEmpleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 445, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIngresarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIngresarEmpleadoActionPerformed
        // TODO add your handling code here:
        String name = txtNombresEmpleado.getText();
        boolean vacanteLibre = vacanteJefeLibre();
        int indexDep = cmbDepartamento.getSelectedIndex();
        int indexRol = cmbRolEmpleado.getSelectedIndex();
        int indexEstado = cmbEstado.getSelectedIndex();
        DepartamentoDto departamento = departamentos.get(indexDep);
        RolDto rol = roles.get(indexRol);
        EstadoEmpleadoDto estado = estados.get(indexEstado);
        if (name.isBlank()) {
            JOptionPane.showMessageDialog(
                    this,
                    "Debes ingresar un nombre",
                    "Nombre vacío",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        if (!vacanteLibre) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ya hay un jefe asignado, elije otro rol o departamento",
                    "Existe un jefe",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        if (vacanteLibre && !name.isBlank()) {
            nuevoEmpleado = new EmpleadoDto(
                    0, // id
                    name,//nombre
                    cmbDepartamento.isEnabled()
                    ? departamento.getIdDepartamento()
                    : null, //idDepartamento
                    lblJefe.isEnabled() && jefe != null
                    ? jefe.getIdEmpleado()
                    : null, //idJefe
                    rol.getIdRol(),//idRol
                    estado.getIdEstadoEmpleado() // idEstado
            );
            EMPLEADO_DAO.insert(nuevoEmpleado);

            JOptionPane.showMessageDialog(
                    this,
                    "Empleado ingresado correctamente",
                    "Empleado ingresado",
                    JOptionPane.INFORMATION_MESSAGE
            );
            clear();
            empleados = EMPLEADO_DAO.list();
            fillTable();
        }

    }//GEN-LAST:event_btnIngresarEmpleadoActionPerformed

    private void btnActualizarEmpleadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarEmpleadoActionPerformed
        // TODO add your handling code here:
        String name = txtNombresEmpleado.getText();
        // true: no hay jefe o soy jefe | false: hay jefe y no soy jefe
        boolean isJefeFreeOrSelf = vacanteJefeLibre()
                || (nuevoEmpleado.getIdEmpleado() == jefe.getIdEmpleado());
        int indexDep = cmbDepartamento.getSelectedIndex();
        int indexRol = cmbRolEmpleado.getSelectedIndex();
        int indexEstado = cmbEstado.getSelectedIndex();
        DepartamentoDto departamento = departamentos.get(indexDep);
        RolDto rol = roles.get(indexRol);
        EstadoEmpleadoDto estado = estados.get(indexEstado);
        if (name.isBlank()) {
            JOptionPane.showMessageDialog(
                    this,
                    "Debes ingresar un nombre",
                    "Nombre vacío",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        if (!isJefeFreeOrSelf) {
            JOptionPane.showMessageDialog(
                    this,
                    "Ya hay un jefe asignado, elije otro rol o departamento",
                    "Existe un jefe",
                    JOptionPane.ERROR_MESSAGE
            );
        }
        if (!name.isBlank() && isJefeFreeOrSelf) {
            nuevoEmpleado.setNombreEmpleado(name);

            nuevoEmpleado.setIdDepartamento(
                    cmbDepartamento.isEnabled()
                    ? departamento.getIdDepartamento()
                    : null);

            nuevoEmpleado.setIdJefe(
                    lblJefe.isEnabled() && jefe != null
                    ? jefe.getIdEmpleado()
                    : null);

            nuevoEmpleado.setIdRol(rol.getIdRol());

            nuevoEmpleado.setIdEstadoEmpleado(estado.getIdEstadoEmpleado());

            EMPLEADO_DAO.update(nuevoEmpleado);

            JOptionPane.showMessageDialog(
                    this,
                    "Empleado actualizado correctamente",
                    "Empleado actualizado",
                    JOptionPane.INFORMATION_MESSAGE
            );
            clear();
            empleados = EMPLEADO_DAO.list();
            fillTable();
        }
    }//GEN-LAST:event_btnActualizarEmpleadoActionPerformed

    private void jTableEmpleadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEmpleadosMouseClicked
        // TODO add your handling code here:
        int fila = jTableEmpleados.rowAtPoint(evt.getPoint());
        if (fila > -1) {
            nuevoEmpleado = EMPLEADO_DAO.read((int) datos[fila][0]);
            int estado = 0;
            int rol = 0;
            int departamento = 0;
            for (EstadoEmpleadoDto e : estados) {
                if (e.getIdEstadoEmpleado() == nuevoEmpleado.getIdEstadoEmpleado()) {
                    estado = estados.indexOf(e);
                    break;
                }
            }
            for (RolDto r : roles) {
                if (r.getIdRol() == nuevoEmpleado.getIdRol()) {
                    rol = roles.indexOf(r);
                    break;
                }
            }
            for (DepartamentoDto d : departamentos) {
                if (d.getIdDepartamento().equals(nuevoEmpleado.getIdDepartamento())) {
                    departamento = departamentos.indexOf(d);
                    break;
                }
            }
            txtIdEmpleado.setText(String.valueOf(nuevoEmpleado.getIdEmpleado()));
            txtNombresEmpleado.setText(nuevoEmpleado.getNombreEmpleado());
            cmbDepartamento.setSelectedIndex(departamento);
            cmbEstado.setSelectedIndex(estado);
            cmbRolEmpleado.setSelectedIndex(rol);
            changeRol();
            btnActualizarEmpleado.setEnabled(true);
            btnIngresarEmpleado.setEnabled(false);
        }

    }//GEN-LAST:event_jTableEmpleadosMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        isOpen = false;
    }//GEN-LAST:event_formInternalFrameClosing

    private void setJefe() {
        int indexDep = cmbDepartamento.getSelectedIndex();
        int index = cmbRolEmpleado.getSelectedIndex();
        DepartamentoDto departamento = departamentos.get(indexDep);

        switch (roles.get(index).getIdRol()) {
            case RolDto.JEFE_FUNCIONAL:
            case RolDto.EMPLEADO: {
                jefe = EMPLEADO_DAO.getJefeDepartamento(departamento);
                break;
            }
            case RolDto.JEFE_DESARROLLO:
            case RolDto.PROGRAMADOR: {
                jefe = EMPLEADO_DAO.getJefeProgramador(departamento);
                break;
            }
            default:
                jefe = null;
                break;
        };
        String nombre = jefe == null ? "" : jefe.getNombreEmpleado();
        lblNombreJefe.setText(nombre);
        fillTable();
    }

    private void changeRol() {
        int index = cmbRolEmpleado.getSelectedIndex();
        boolean isAdmin = roles.get(index).getIdRol() == RolDto.ADMINISTRADOR;
        lblNombreJefe.setEnabled(!isAdmin);
        cmbDepartamento.setEnabled(!isAdmin);
        setJefe();
    }

    private boolean vacanteJefeLibre() {
        int indexDep = cmbDepartamento.getSelectedIndex();
        int index = cmbRolEmpleado.getSelectedIndex();
        DepartamentoDto departamento = departamentos.get(indexDep);
        EmpleadoDto jefeExistente = null;
        switch (roles.get(index).getIdRol()) {
            case RolDto.JEFE_FUNCIONAL:
                jefeExistente = EMPLEADO_DAO.getJefeDepartamento(departamento);
                break;
            case RolDto.JEFE_DESARROLLO:
                jefeExistente = EMPLEADO_DAO.getJefeProgramador(departamento);
                break;
        };

        return jefeExistente == null;
    }

    private void fillTable() {
        int i = 0;
        String name = txtBuscarEmpleado.getText().trim().toLowerCase();

        List<EmpleadoDto> jefesDep = new LinkedList<>();
        List<EmpleadoDto> jefesProg = new LinkedList<>();
        List<EmpleadoDto> filteredList = new LinkedList<>();
        for (EmpleadoDto e : empleados) {
            if (e.getNombreEmpleado().toLowerCase().contains(name)) {
                filteredList.add(e);
            }
            if (e.getIdRol() == RolDto.JEFE_FUNCIONAL) {
                jefesDep.add(e);
            }
            if (e.getIdRol() == RolDto.JEFE_DESARROLLO) {
                jefesProg.add(e);
            }
        }
        datos = new Object[filteredList.size()][COLUMNAS.length];
        for (EmpleadoDto e : filteredList) {
            String nombreEstado = "";
            String nombreJefe = "";
            String nombreRol = "";
            String nombreDepartamento = "";
            if (e.getIdJefe() != null) {
                switch (e.getIdRol()) {
                    case RolDto.EMPLEADO: {
                        for (EmpleadoDto j : jefesDep) {
                            if (j.getIdEmpleado() == e.getIdJefe()) {
                                nombreJefe = j.getNombreEmpleado();
                                break;
                            }
                        }
                        break;
                    }
                    case RolDto.PROGRAMADOR: {
                        for (EmpleadoDto p : jefesProg) {
                            if (p.getIdEmpleado() == e.getIdJefe()) {
                                nombreJefe = p.getNombreEmpleado();
                                break;
                            }
                        }
                        break;
                    }
                }
            }
            for (RolDto rol : roles) {
                if (rol.getIdRol() == e.getIdRol()) {
                    nombreRol = rol.getNombreRol();
                    break;
                }
            }
            for (EstadoEmpleadoDto estado : estados) {
                if (estado.getIdEstadoEmpleado() == e.getIdEstadoEmpleado()) {
                    nombreEstado = estado.getNombreEstadoEmpleado();
                    break;
                }
            }
            for (DepartamentoDto departamento : departamentos) {
                if (departamento.getIdDepartamento().equals(e.getIdDepartamento())) {
                    nombreDepartamento = departamento.getNombreDepartamento();
                    break;
                }
            }
            datos[i][0] = e.getIdEmpleado();
            datos[i][1] = e.getNombreEmpleado();
            datos[i][2] = nombreEstado;
            datos[i][3] = nombreJefe;
            datos[i][4] = nombreRol;
            datos[i][5] = nombreDepartamento;
            i++;
        }

        DefaultTableModel dtm = new DefaultTableModel(datos, COLUMNAS);
        jTableEmpleados.setModel(dtm);
    }

    private void clear() {
        nuevoEmpleado = null;
        txtIdEmpleado.setText("");
        txtNombresEmpleado.setText("");
        cmbDepartamento.setSelectedIndex(0);
        cmbEstado.setSelectedIndex(0);
        cmbRolEmpleado.setSelectedIndex(0);
        btnActualizarEmpleado.setEnabled(false);
        btnIngresarEmpleado.setEnabled(true);
    }

    public static boolean isIsOpen() {
        return isOpen;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizarEmpleado;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnIngresarEmpleado;
    private javax.swing.JComboBox<String> cmbDepartamento;
    private javax.swing.JComboBox<String> cmbEstado;
    private javax.swing.JComboBox<String> cmbRolEmpleado;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableEmpleados;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblJefe;
    private javax.swing.JLabel lblNombreJefe;
    private javax.swing.JTextField txtBuscarEmpleado;
    private javax.swing.JTextField txtIdEmpleado;
    private javax.swing.JTextField txtNombresEmpleado;
    // End of variables declaration//GEN-END:variables
}
